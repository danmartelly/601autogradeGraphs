$(function() {
	
	var answerData = [[0,3], [4,8], [8,5], [7,7], [9,13]];
	var studentData = [];
	var plot = null;
	
	var rePlot = function() {
		var allData = [];
		if ($("#studentCheckbox").prop("checked")) {
			allData.push(studentData);
		}
		if ($("#answerCheckbox").prop("checked")) {
			allData.push(answerData);
		}
		plot = $.plot($("#placeholder"), allData, {
			
		});
	};
	rePlot();
	
	$("#placeholder").bind("plothover", function (event, pos, item) {
		//mouse position
		var str = "mouse: (" + pos.x.toFixed(2) + ", " + pos.y.toFixed(2) + ")";
		//check datapoint
		if (item) {
			var x = item.datapoint[0].toFixed(2),
				y = item.datapoint[1].toFixed(2);
			str += "\nData: (" + x + ", " + y + ")";
		}
		$("#feedback").text(str);
	});
	
	$("#showGraphs").change(rePlot);
	
	$("#compareButton").click(function(e) {
		var xaxis = plot.getAxes().xaxis;
		var minx = xaxis.datamin;
		var maxx = xaxis.datamax;
		var s = plot.getData();
		var refArray = s[1].data;
		var otherArray = s[0].data;
		var compareResult = compareData(refArray, otherArray, minx, maxx, (maxx-minx)/10);
		$("#feedback").text(compareResult["variance"]);
	});
	
	// way to compare the data
	function compareData(refArray, otherArray, loLimit, hiLimit, interval) {
		// find variance
		var variance;
		var counter = 0;
		var squareTotal = 0;
		for (var x = loLimit; x <= hiLimit; x = x + interval) {
			counter++;
			var refy = linearInterpolate(refArray, x);
			var othery = linearInterpolate(otherArray, x);
			squareTotal += Math.pow((refy - othery), 2);
		}
		variance = squareTotal/counter;
		return {
			"variance":variance,
		};
	}
	
	// Take in an array and an x value, and linearly interpolate to find the
	// associated value
	function linearInterpolate(dataArray, x) {
		var before = null, after = null;
		for (var i = 0; i < dataArray.length; i++) {
			if (dataArray[i][0] > x) {
				after = dataArray[i];
				before = dataArray[i-1];
				break;
			}
		}
		if (before == undefined) {
			return after;
		} else {
			//linearly interpolate at this point
			var x0 = before[0];
			var y0 = before[1];
			var x1 = after[0];
			var y1 = after[1];
			return y0 + (y1 - y0)*(x - x0)/(x1 - x0);
		}
	}
	
	
});