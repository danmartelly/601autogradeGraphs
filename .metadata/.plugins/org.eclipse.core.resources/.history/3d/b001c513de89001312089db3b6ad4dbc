$(function() {
	function genericSin(x, amp, freq, xShift, offset) {
		return amp*Math.sin(2*Math.PI*freq*(x - xShift)) + offset;
	}
	function genericExp(x, initial, factor, timeConst, xShift, offset) {
		return initial*Math.pow(factor,((x-xShift)/timeConst)) + offset;
	}
	
	var answerData = {
		label: "answerData"
		, data: []
		, points: {show: true}
	};
	for (var i = 0; i < 14; i += 0.5) {
		answerData.data.push([i, genericExp(i, 1, 2, 1, 0, 0)]);
	}
	
	var plotData = {
		label: "plotData"
		, data: []
		, points: {show: true}
	};

	for (var i = 0; i < 14; i += 0.5) {
//		plotData.data.push([i, genericSin(i, 2.15452795, 0.99964759, 0.99957028, 0.04148915)]);
		plotData.data.push([i, genericExp(i, 4.1239, 1.907, .9314, 2.044, 0)]);
	}
	
	var studentData = {
		label: "studentData"
		, data: []
		, points: { show: true }
		, lines: { show: true }
	};
	var plot = null;
	
	var rePlot = function() {
		elements = $(".flotPlaceholder");
		elements.each(function () {
			
			var allData = [];
			if ($(this).find(".studentCheckbox").prop("checked")) {
				allData.push(studentData);
			}
			if ($("#answerCheckbox").prop("checked")) {
				allData.push(answerData);
			}
			allData.push(plotData);
			
			var percentage = parseFloat($("#percentAmount").val());
			if ($("#plusPercent").prop("checked")) {
				var change = 1 + percentage;
				var moreData = [];
				$.each(answerData.data, function(index, value) {
					moreData.push([value[0], value[1]*change]);
				});
				allData.push({
					label: "plusPercent"
					, data: moreData
				});
			}
			if ($("#minusPercent").prop("checked")) {
				var change = 1 - percentage;
				var moreData = [];
				$.each(answerData.data, function(index, value) {
					moreData.push([value[0], value[1]*change]);
				});
				allData.push({
					label: "minusPercent"
					, data: moreData
				});
			}
			var interval = parseFloat($("#intervalAmount").val(), 10);
			if ($("#plusInterval").prop("checked")) {
				var moreData = [];
				$.each(answerData.data, function(index, value) {
					moreData.push([value[0], value[1]+interval]);
				});
				allData.push({
					label: "plusInterval"
					, data: moreData
				});
			}
			if ($("#minusInterval").prop("checked")) {
				var moreData = [];
				$.each(answerData.data, function(index, value) {
					moreData.push([value[0], value[1]-interval]);
				});
				allData.push({
					label: "minusInterval"
					, data: moreData
				});
			}
			
			$(this).plot = $.plot($(this), allData, {});
		});
	};
	rePlot();
	console.log($(".flotPlaceholder")[0]);
	
	$("#placeholder").bind("plothover", function (event, pos, item) {
		//mouse position
		var str = "mouse: (" + pos.x.toFixed(2) + ", " + pos.y.toFixed(2) + ")";
		//check datapoint
		if (item) {
			var x = item.datapoint[0].toFixed(2),
				y = item.datapoint[1].toFixed(2);
			str += "\nData: (" + x + ", " + y + ")";
		}
		$("#feedback").text(str);
	});
	
	$("#showGraphs").change(rePlot);
	
	$("#compareButton").click(function(e) {
		var xaxis = plot.getAxes().xaxis;
		var minx = xaxis.datamin;
		var maxx = xaxis.datamax;
		var s = plot.getData();
		var refArray = s[1].data;
		var otherArray = s[0].data;
		var compareResult = compareData(refArray, otherArray, minx, maxx, (maxx-minx)/10);
		$("#feedback").text(compareResult["variance"]);
	});
	
	$("#toJSON").click(function(e) {
		var jsonData = JSON.stringify(plot.getData());
		$("#jsonText").val(jsonData);
	});
	
	// way to compare the data
	function compareData(refArray, otherArray, loLimit, hiLimit, interval) {
		// find variance
		var variance;
		var counter = 0;
		var squareTotal = 0;
		for (var x = loLimit; x <= hiLimit; x = x + interval) {
			counter++;
			var refy = linearInterpolate(refArray, x);
			var othery = linearInterpolate(otherArray, x);
			squareTotal += Math.pow((refy - othery), 2);
		}
		variance = squareTotal/counter;
		return {
			"variance":variance,
		};
	}
	
	// Take in an array and an x value, and linearly interpolate to find the
	// associated y value
	function linearInterpolate(dataArray, x) {
		var before = null, after = null;
		for (var i = 0; i < dataArray.length; i++) {
			if (dataArray[i][0] > x) {
				after = dataArray[i];
				before = dataArray[i-1];
				break;
			}
		}
		if (before == undefined) {
			return after[1];
		} else {
			//linearly interpolate at this point
			var x0 = before[0];
			var y0 = before[1];
			var x1 = after[0];
			var y1 = after[1];
			return y0 + (y1 - y0)*(x - x0)/(x1 - x0);
		}
	}
	
	
});